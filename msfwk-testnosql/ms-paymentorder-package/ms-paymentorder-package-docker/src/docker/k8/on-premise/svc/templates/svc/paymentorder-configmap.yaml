#
# *******************************************************************************
# * Copyright Â© Temenos Headquarters SA 2021. All rights reserved.
# *******************************************************************************
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-api-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-api-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  POSTGRESQL_USERNAME: {{ .Values.env.database.POSTGRESQL_USERNAME }}
  POSTGRESQL_PASSWORD: {{ .Values.env.database.POSTGRESQL_PASSWORD }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }}   
  className_CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
  className_GetPaymentOrders: com.temenos.microservice.paymentorder.function.GetPaymentOrdersImpl
  className_UpdatePaymentOrder: com.temenos.microservice.paymentorder.function.UpdatePaymentOrderImpl
  className_GetPaymentOrder: com.temenos.microservice.paymentorder.function.GetPaymentOrderImpl
  className_invokePaymentState: com.temenos.microservice.paymentorder.function.InvokePaymentOrderImpl
  className_GetPaymentOrderCurrency: com.temenos.microservice.paymentorder.function.GetPaymentOrderCurrencyImpl
  className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl
  API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.paymentorder.function.BusinessConditionImpl
  className_CreateNewPaymentOrders: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrdersImpl
  className_UpdateNewPaymentOrders: com.temenos.microservice.paymentorder.function.UpdateNewPaymentOrdersImpl
  className_DeletePaymentOrders: com.temenos.microservice.paymentorder.function.DeletePaymentOrdersImpl
  className_FileUpload: com.temenos.microservice.paymentorder.function.FileUploadImpl
  className_createReferenceData: com.temenos.microservice.framework.core.data.referencedata.CreateReferenceDataImpl
  className_getReferenceData: com.temenos.microservice.framework.core.data.referencedata.GetReferenceDataImpl
  className_updateReferenceData: com.temenos.microservice.framework.core.data.referencedata.UpdateReferenceDataImpl
  className_addReferenceData: com.temenos.microservice.framework.core.data.referencedata.AddReferenceDataImpl
  className_deleteReferenceData: com.temenos.microservice.framework.core.data.referencedata.DeleteReferenceDataImpl
  className_UpdateStatus: com.temenos.microservice.paymentorder.function.UpdatePaymentStatusImpl
  className_DeleteWithCondition: com.temenos.microservice.paymentorder.function.DeleteWithConditionImpl 
  className_FileDownload: com.temenos.microservice.paymentorder.function.FileDownloadImpl
  className_DoInputValidation: com.temenos.microservice.paymentorder.function.DoInputValidationImpl
  className_GetInputValidation: com.temenos.microservice.paymentorder.function.GetInputValidationImpl
  className_deletePaymentOrder: com.temenos.microservice.paymentorder.function.DeletePaymentOrderImpl
  className_CreateEmployee: com.temenos.microservice.payments.function.CreateEmployeeImpl
  className_GetEmployee: com.temenos.microservice.payments.function.GetEmployeeImpl
  className_UpdateEmployee: com.temenos.microservice.payments.function.UpdateEmployeeImpl
  className_DeleteEmployee: com.temenos.microservice.payments.function.DeleteEmployeeImpl
  className_CreateUser: com.temenos.microservice.paymentorder.function.CreateUserImpl
  className_GetUser: com.temenos.microservice.paymentorder.function.GetUserImpl
  className_searchUsers: com.temenos.microservice.paymentorder.function.SearchUsersImpl
  className_createCustomer: com.temenos.microservice.paymentorder.function.CreateCustomerImpl
  className_getCustomers: com.temenos.microservice.paymentorder.function.GetCustomerImpl
  className_CreateAccount: com.temenos.microservice.paymentorder.function.CreateAccountImpl
  className_GetAccount: com.temenos.microservice.paymentorder.function.GetAccountImpl
  className_DeleteAccount: com.temenos.microservice.paymentorder.function.DeleteAccountImpl
  className_UpdateAccount: com.temenos.microservice.paymentorder.function.UpdateAccountImpl
  className_FileDelete: com.temenos.microservice.paymentorder.function.FileDeleteImpl
  className_GetAccountValidate: com.temenos.microservice.payments.function.GetAccountValidateImpl
  class.package.name: com.temenos.microservice.paymentorder.function
  temn.msf.name: ms-paymentorder
  temn.msf.service: API  
  temn.msf.pdp.resource.type: API
  temn.msf.pdp.resource.manager: PAYMENT
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  temn.msf.audit.enabled: {{ .Values.audit.ENABLE_AUDIT | quote }}
  temn.msf.audit.get.enabled: {{ .Values.audit.ENABLE_AUDIT_FOR_GET_API | quote }}
  temn.msf.audit.response.enabled: {{ .Values.audit.ENABLE_AUDIT_TO_CAPTURE_RESPONSE | quote }}
  IRIS_PROTOCOL: "http"
  IRIS_HOST_IP: "localhost"
  IRIS_PORT: "9089"
  IRIS_PATH: "irf-provider-container/api"
  IRIS_R18_PATH: "irisR18/api"
  IRIS_VERSION: "v1.0.0"
  className_initiateDbMigration: com.temenos.microservice.framework.dbmigration.core.InitiateDbMigrationImpl
  className_getDbMigrationStatus: com.temenos.microservice.framework.dbmigration.core.GetDbMigrationStatusImpl
  className_ReprocessEvents: com.temenos.microservice.framework.core.error.function.ReprocessEventsImpl
  className_GetErrorEvents: com.temenos.microservice.framework.core.error.function.GetErrorEventsImpl
  temn.msf.ingest.reprocess.source.stream: reprocess-event
  #temn.config.service.base.path: http://10.93.24.15:8095/ms-genericconfig-api/api/v1.0.0/
  #temn.config.service.resource.path: system/configurationGroups/{groupId}/configuration/{configName}
  temn.msf.scripts.location: "scripts"    
  TEMN_MSF_ADAPTER_CONFIG_CLASSPATH: "false"
  temn.msf.storage.home: "path:/usr/local/tomcat/temp"
  FILE_STORAGE_URL:  /demo.properties
  temn.msf.max.file.upload.size: "70"
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}    
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
{{- end }}    
{{- end }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-ingester-avro-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-ingester-avro-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }} 
  temn.msf.name: {{ .Values.msf.others.name }}
  temn.msf.service: AvroIngester 
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.schema.registry.url: {{ .Values.env.kafka.schema_registry_url | quote }}
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.avrotopic }}
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.errortopic }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstreamproducerid }}
  temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
  com.temenos.des.event.table.payment_order.PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.ingester.PaymentorderIngesterUpdater
  temn.msf.security.authz.enabled: "false"
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.entity.PaymentOrder
  temn.config.file.path: mapping/
  temn.ingester.mapping.enabled: "true"
  #EXECUTION_ENV: TEST
  temn.msf.ingest.consumer.max.poll.records: "1"
  temn.msf.ingest.multipart.source.stream: multipart-topic
  temn.msf.ingest.reprocess.source.stream: reprocess-event
  temn.msf.ingest.sink.stream.data.multipart: multipart-topic
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.ingest.multipart.source.stream.consumergroup.id: multipart-1  
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-ingester-command-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-ingester-command-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }} 
  temn.msf.name: {{ .Values.msf.others.name }}
  temn.msf.service: CommandIngester 
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.inboxtopic }}
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.inboxerrortopic }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstreamproducerid }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.consumergroupid }} 
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: {{ .Values.msf.others.execenv }}
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
  className_UpdatePaymentOrder: com.temenos.microservice.paymentorder.function.UpdatePaymentOrderImpl
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false"
  class.package.name: com.temenos.microservice.paymentorder.function
  temn.msf.audit.enabled: {{ .Values.audit.ENABLE_AUDIT | quote }}
  temn.msf.audit.get.enabled: {{ .Values.audit.ENABLE_AUDIT_FOR_GET_API | quote }}
  temn.msf.audit.response.enabled: {{ .Values.audit.ENABLE_AUDIT_TO_CAPTURE_RESPONSE | quote }}
  IRIS_PROTOCOL: "http"
  IRIS_HOST_IP: "localhost"
  IRIS_PORT: "9089"
  IRIS_PATH: "irf-provider-container/api"
  IRIS_R18_PATH: "irisR18/api"
  IRIS_VERSION: "v1.0.0"
  #temn.msf.pdp.resource.type: API
  #temn.msf.pdp.resource.manager: PAYMENT
  #PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  JWT_TOKEN_ISSUER: https://localhost:9443/oauth2/token
  JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
  ID_TOKEN_SIGNED: "true"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.93.22.58:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"  
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-ingester-event-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-ingester-event-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }} 
  temn.msf.name: {{ .Values.msf.others.name }}
  temn.msf.service: EventIngester 
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.eventtopic }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstreamproducerid }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.consumergroupid }} 
  temn.msf.ingest.sink.error.enabled: "false"
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: {{ .Values.msf.others.execenv }}
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
  temn.msf.ingest.event.processor: com.temenos.microservice.paymentorder.ingester.EventHandlerImpl
  temn.msf.ingest.event.processor.POAccepted: com.temenos.microservice.paymentorder.ingester.PoHandlerImpl
  # temn.msf.raise.received.event: "true"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false" 
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.audit.enabled: {{ .Values.audit.ENABLE_AUDIT | quote }}
  temn.msf.audit.get.enabled: {{ .Values.audit.ENABLE_AUDIT_FOR_GET_API | quote }}
  temn.msf.audit.response.enabled: {{ .Values.audit.ENABLE_AUDIT_TO_CAPTURE_RESPONSE | quote }}
  JWT_TOKEN_ISSUER: https://localhost:9443/oauth2/token
  JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
  ID_TOKEN_SIGNED: "true"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.93.22.58:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"   
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-eventdelivery-config" }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-eventdelivery-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }} 
  temn.msf.name: {{ .Values.msf.others.name }}
  temn.msf.service: EventDelivery
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.exec.env: server
  temn.msf.stream.outbox.topic: ms-paymentorder-outbox-topic
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
  temn.msf.security.authz.enabled: "{{ .Values.msf.others.authzenabled }}"
  tmn.inbox.source.namespace: {{ .Values.inboxoutbox.inbox.namespace }}
  tmn.outbox.source.namespace: {{ .Values.inboxoutbox.outbox.namespace }} 
  tmn.inbox.thread.pool.count: "{{ .Values.inboxoutbox.inbox.threadpoolcount }}"
  tmn.outbox.thread.pool.count: "{{ .Values.inboxoutbox.outbox.threadpoolcount }}"
  temn.msf.ingest.is.cloud.event: "{{ .Values.msf.ingest.cloudevent }}"   
  temn.msf.ingest.is.cloud.event: "true"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-ingester-data-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-ingester-data-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: DataIngester
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.schema.registry.url: {{ .Values.env.kafka.schema_registry_url | quote }}
  temn.msf.ingest.source.stream: table-update
  temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.errortopic }}
  temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
  temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
  PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.ingester.PaymentorderIngesterUpdater
  temn.msf.security.authz.enabled: "false"
  temn.msf.ingest.consumer.max.poll.records: "1"
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  IRIS_PROTOCOL: "http"
  IRIS_HOST_IP: "localhost"
  IRIS_PORT: "9089"
  IRIS_PATH: "irf-provider-container/api"
  IRIS_R18_PATH: "irisR18/api"
  IRIS_VERSION: "v1.0.0"
  PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  temn.msf.pdp.resource.type: API
  temn.msf.pdp.resource.manager: PAYMENT
  JWT_TOKEN_ISSUER: https://localhost:9443/oauth2/token
  JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
  ID_TOKEN_SIGNED: "true"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.93.22.58:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken" 
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "paymentorder.name" . }}{{ "-scheduler-config" }}
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-scheduler-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.executor.schedule: {{ .Values.env.nosqlinboxcatchupscheduler.schedule | quote }}
  temn.msf.executor.schedule.timeunit: {{ .Values.env.nosqlinboxcatchupscheduler.timeunit | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: Scheduler
  temn.msf.security.authz.enabled: "false" 
  className_paymentscheduler: com.temenos.microservice.paymentorder.scheduler.PaymentOrderScheduler 
  className_nosqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlInboxCatchupProcessor
  className_nosqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlOutboxCatchupProcessor
  operationId: nosqlOutboxCatchup
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.scheduler.time.delay: "0"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: paymentorder-ingester-file-config
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: {{ include "paymentorder.name" . }}{{ "-scheduler-config" }}
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: FileIngester 
  temn.msf.security.authz.enabled: "false"
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.file.source.path: /var/lib/fileingesterstorage
  temn.msf.ingest.file.procesed.path: /var/lib
  temn.msf.ingest.file.ingester: com.temenos.microservice.paymentorder.ingester.PoFileIngester 
  temn.msf.stream.vendor: kafka
  temn.msf.ingest.sink.stream: table-update-splitData
  temn.msf.ingest.client.id: split-group
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  temn.msf.ingest.max.load.topic: "2"   
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nosqlinboxcatchup-scheduler-config
  namespace: {{.Values.namespace}}
  labels:
    app.kubernetes.io/name: nosqlinboxcatchup-scheduler-config
    helm.sh/chart: {{ include "paymentorder.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.DATABASE_KEY }}
  MONGODB_DBNAME: {{ .Values.env.database.MONGODB_DBNAME }}
  MONGODB_CONNECTIONSTR: {{ .Values.env.database.MONGODB_CONNECTIONSTR }}
  POSTGRESQL_CONNECTIONURL: {{ .Values.env.database.POSTGRESQL_CONNECTIONURL }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.name: ms-paymentorder  
  temn.msf.security.authz.enabled: "false" 
  temn.msf.scheduler.inboxcleanup.schedule: {{ .Values.env.nosqlinboxcatchupscheduler.temn_msf_scheduler_inboxcleanup_schedule | quote }}
  temn.msf.executor.schedule: {{ .Values.env.nosqlinboxcatchupscheduler.schedule | quote }}
  temn.msf.executor.schedule.timeunit: {{ .Values.env.nosqlinboxcatchupscheduler.timeunit | quote }}
  className_nosqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlInboxCatchupProcessor
  className_nosqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlOutboxCatchupProcessor
  temn.msf.outbox.direct.delivery.enabled: {{ .Values.env.eventdelivery.outboxdirectdeliveryenabled }}
  operationId: nosqlInboxCatchup
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}