#-------------------------------------------------------------
#- Docker compose base definition file to run containers.
#-----------------------------------------------------------

version: '3.6'
services:
  cache-service:
    build:
      context: ${CACHE_CONTEXT}
      dockerfile: Dockerfile
      args:
        CACHE_BASE_IMAGE: ${CACHE_BASE_IMAGE}
    image: ${CACHE_BASE_IMAGE}
    ports:
      - "10800:10800"
  db-service1:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo1'
    ports:
      - "30001:27017"
  db-service2:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo2'
    ports:
      - "30002:27017" 
  db-service3:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo3'
    ports:
      - "30003:27017"
  mongosetup:
    container_name: 'mongoinit'
    build:
      context: ${MONGO_INIT_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
  api:
    build:
      context: ${API_CONTEXT}
      dockerfile: Dockerfile
      args:
        API_BASE_IMAGE: ${API_BASE_IMAGE}
        api_artifactid: ${api_artifactid}
        api_java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${API_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "8090:8080"
      - "40509:40500"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017      
      className_CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      className_GetPaymentOrders: com.temenos.microservice.paymentorder.function.GetPaymentOrdersImpl
      className_UpdatePaymentOrder: com.temenos.microservice.paymentorder.function.UpdatePaymentOrderImpl
      className_GetPaymentOrder: com.temenos.microservice.paymentorder.function.GetPaymentOrderImpl
      className_invokePaymentState: com.temenos.microservice.paymentorder.function.InvokePaymentOrderImpl
      className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl
      API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.paymentorder.function.BusinessConditionImpl
      temn.msf.name: PaymentOrder
      temn.msf.security.authz.enabled: "false"
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.ingest.outbox.cache.namespace: paymentorder-outbox
      tmn.ignite.host: cache-service
      tmn.ignite.port: 10800
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
  ingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40518:40500"
      - "8082:8080"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017      
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
      PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.ingester.PaymentorderIngesterUpdater
      temn.msf.security.authz.enabled: "false"
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.ingest.consumer.max.poll.records: "1"
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
  inboxoutboxprocessorapp:
    build:
      context: ${INBOXOUTBOX_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INBOXOUTBOX_BASE_IMAGE}
        artifactid: ${inboxoutbox_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INBOXOUTBOX_IMAGE}
    depends_on:
      - cache-service
      - db-service1
      - db-service2
      - db-service3      
    ports:
      - "40514:40500"
      - "8089:8080"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.exec.env: server
      temn.msf.stream.outbox.topic: ms-paymentorder-outbox-topic
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      class.package.name: com.temenos.microservice.paymentorder.function
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.security.authz.enabled: "false"
      tmn.inbox.source.namespace: paymentorder-inbox
      tmn.outbox.source.namespace: paymentorder-outbox
      temn.msf.ingest.outbox.cache.namespace: paymentorder-outbox
      tmn.ignite.host: cache-service
      tmn.ignite.port: 10800
      tmn.inbox.thread.pool.count: 10
      tmn.outbox.thread.pool.count: 10  
  ingesterbinary:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40510:40500"
      - "8084:8080"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: ms-paymentorder-inbox-topic
      temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: ms-paymentorder-inbox-error-topic
      temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandBinaryIngester
      temn.msf.exec.env: server
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      class.package.name: com.temenos.microservice.paymentorder.function
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.inbox.cache.namespace: paymentorder-inbox
      temn.msf.ingest.outbox.cache.namespace: paymentorder-outbox
      tmn.ignite.host: cache-service
      tmn.ignite.port: 10800
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0