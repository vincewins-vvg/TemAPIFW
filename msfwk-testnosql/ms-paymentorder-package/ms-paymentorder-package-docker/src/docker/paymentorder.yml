#-------------------------------------------------------------
#- Docker compose base definition file to run containers.
#-----------------------------------------------------------

version: '3.6'
services:
  db-service1:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo1'
    ports:
      - "30001:27017"
  db-service2:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo2'
    ports:
      - "30002:27017" 
  db-service3:
    build:
      context: ${MONGO_DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    container_name: 'mongo3'
    ports:
      - "30003:27017"
  mongosetup:
    container_name: 'mongoinit'
    build:
      context: ${MONGO_INIT_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${MONGO_DB_BASE_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
  api:
    build:
      context: ${API_CONTEXT}
      dockerfile: Dockerfile
      args:
        API_BASE_IMAGE: ${API_BASE_IMAGE}
        api_artifactid: ${api_artifactid}
        api_java_options: ${java_options} ${REMOTE_DEBUG} ${api_jacoco_jvm_opts}
    image: ${API_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "8090:8080"
      - "36320:36320"
      - "40509:40500"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017      
      className_GetPaymentOrders: com.temenos.microservice.paymentorder.function.GetPaymentOrdersImpl
      className_GetPaymentOrder: com.temenos.microservice.paymentorder.function.GetPaymentOrderImpl
      className_invokePaymentState: com.temenos.microservice.paymentorder.function.InvokePaymentOrderImpl
      className_GetPaymentOrderCurrency: com.temenos.microservice.paymentorder.function.GetPaymentOrderCurrencyImpl
      className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl
      className_FileUpload: com.temenos.microservice.paymentorder.function.FileUploadImpl
      className_FileDownload: com.temenos.microservice.paymentorder.function.FileDownloadImpl
      className_createReferenceData: com.temenos.microservice.framework.core.data.referencedata.CreateReferenceDataImpl
      className_getReferenceData: com.temenos.microservice.framework.core.data.referencedata.GetReferenceDataImpl
      className_updateReferenceData: com.temenos.microservice.framework.core.data.referencedata.UpdateReferenceDataImpl
      className_addReferenceData: com.temenos.microservice.framework.core.data.referencedata.AddReferenceDataImpl
      className_deleteReferenceData: com.temenos.microservice.framework.core.data.referencedata.DeleteReferenceDataImpl
      className_UpdateStatus: com.temenos.microservice.paymentorder.function.UpdatePaymentStatusImpl
      className_DeleteWithCondition: com.temenos.microservice.paymentorder.function.DeleteWithConditionImpl
      className_CreateUser: com.temenos.microservice.paymentorder.function.CreateUserImpl
      className_GetUser: com.temenos.microservice.paymentorder.function.GetUserImpl
      className_CreateAccount: com.temenos.microservice.paymentorder.function.CreateAccountImpl
      className_GetAccount: com.temenos.microservice.paymentorder.function.GetAccountImpl
      className_DeleteAccount: com.temenos.microservice.paymentorder.function.DeleteAccountImpl
      className_UpdateAccount: com.temenos.microservice.paymentorder.function.UpdateAccountImpl
      className_createCustomer: com.temenos.microservice.paymentorder.function.CreateCustomerImpl
      className_getCustomers: com.temenos.microservice.paymentorder.function.GetCustomerImpl
      className_deletePaymentOrder: com.temenos.microservice.paymentorder.function.DeletePaymentOrderImpl
      className_DoInputValidation: com.temenos.microservice.paymentorder.function.DoInputValidationImpl
      className_GetInputValidation: com.temenos.microservice.paymentorder.function.GetInputValidationImpl
      className_searchUsers: com.temenos.microservice.paymentorder.function.SearchUsersImpl
      className_FileDelete: com.temenos.microservice.paymentorder.function.FileDeleteImpl
      className_GetAccountValidate: com.temenos.microservice.payments.function.GetAccountValidateImpl
      API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.paymentorder.function.BusinessConditionImpl
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.queue.impl: kafka
      PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
      temn.msf.pdp.resource.type: API
      temn.msf.pdp.resource.manager: PAYMENT
      temn.msf.storage.home: ${MS_STORAGE_HOME}
      FILE_STORAGE_URL: ${FILE_STORAGE_URL}
      temn.msf.max.file.upload.size: ${MAX_FILE_UPLOAD_SIZE}
      ms.security.tokencheck.enabled: Y
      temn.entitlement.stubbed.service.enabled: "true"
      JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
      JWT_TOKEN_ISSUER: "https://localhost:9443/oauth2/token"
      ID_TOKEN_SIGNED: "true"
      JWT_TOKEN_PUBLIC_KEY: "TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFuenlpczFaamZOQjBiQmdLRk1Tdg0KdmtUdHdsdkJzYUpxN1M1d0Era3plVk9WcFZXd2tXZFZoYTRzMzhYTS9wYS95cjQ3YXY3K3ozVlRtdkRSeUFIYw0KYVQ5MndoUkVGcEx2OWNqNWxUZUpTaWJ5ci9Ncm0vWXRqQ1pWV2dhT1lJaHdyWHdLTHFQci8xMWluV3NBa2ZJeQ0KdHZIV1R4WllFY1hMZ0FYRnVVdWFTM3VGOWdFaU5Rd3pHVFUxdjBGcWtxVEJyNEI4blczSENONDdYVXUwdDhZMA0KZStsZjRzNE94UWF3V0Q3OUo5LzVkM1J5MHZiVjNBbTFGdEdKaUp2T3dSc0lmVkNoRHBZU3RUY0hUQ01xdHZXYg0KVjZMMTFCV2twekdYU1c0SHY0M3FhK0dTWU9EMlFVNjhNYjU5b1NrMk9CK0J0T0xwSm9mbWJHRUdndm13eUNJOQ0KTXdJREFRQUI"

      #temn.entitlement.service.base.path: http://10.93.23.73:8095/ms-entitlement-api/api/v1.0.0
      #temn.entitlement.service.resource.path: system/entitlements/users/{userId}
    #extra_hosts:
      #- "entitlement-api:10.93.23.73"
  paymentorderScheduler:
    build:
      context: ${SCHEDULER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${SCHEDULER_BASE_IMAGE}
        artifactid: ${scheduler_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${SCHEDULER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40515:40500"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017 
      temn.msf.name: PaymentOrder
      temn.msf.security.authz.enabled: "false"
      temn.queue.impl: kafka
      temn.msf.scheduler.paymentscheduler.cron.trigger.time: 59 * * ? * *
      className_paymentscheduler: com.temenos.microservice.paymentorder.scheduler.PaymentOrderScheduler
      className_nosqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlInboxCatchupProcessor
      className_nosqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.NoSqlOutboxCatchupProcessor
      temn.msf.scheduler.nosqlInboxCatchup.cron.trigger.time: 59 * * ? * *
      temn.msf.scheduler.nosqlOutboxCatchup.cron.trigger.time: 59 * * ? * *
  inboxoutboxprocessorapp:
    build:
      context: ${INBOXOUTBOX_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INBOXOUTBOX_BASE_IMAGE}
        artifactid: ${inboxoutbox_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INBOXOUTBOX_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3      
    ports:
      - "40514:40500"
      - "8089:8080"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.exec.env: server
      temn.msf.stream.outbox.topic: ms-paymentorder-outbox-topic
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      temn.msf.security.authz.enabled: "false"
      tmn.inbox.source.namespace: paymentorder-inbox
      tmn.outbox.source.namespace: paymentorder-outbox
      temn.queue.impl: kafka
      tmn.inbox.thread.pool.count: 10
      tmn.outbox.thread.pool.count: 10
  ingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40518:40500"
      - "36330:36330"
      - "8082:8080"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017      
      temn.msf.name: PaymentOrder
      temn.queue.impl: kafka
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
      PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.ingester.PaymentorderIngesterUpdater
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.consumer.max.poll.records: "1"
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
      PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
      temn.msf.pdp.resource.type: API
      temn.msf.pdp.resource.manager: PAYMENT
  configavroingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40508:40500"
      - "8083:8080"
      - "36331:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017 
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.queue.impl: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-paymentorder
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
      com.temenos.des.event.table.payment_order.PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.ingester.PaymentorderIngesterUpdater
      temn.msf.security.authz.enabled: "false"
      PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.entity.PaymentOrder
      temn.config.file.path: mapping/
      temn.msf.ingest.consumer.max.poll.records: "1"
      temn.ingester.mapping.enabled: "true"
      EXECUTION_ENVIRONMENT: "TEST"
  ingesterbinary:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40510:40500"
      - "8084:8080"
      - "36334:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: ms-paymentorder-inbox-topic
      temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: ms-paymentorder-inbox-error-topic
      temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
      temn.msf.exec.env: server
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      temn.queue.impl: kafka
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: localhost
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
      #PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
      #temn.msf.pdp.resource.type: API
      #temn.msf.pdp.resource.manager: PAYMENT
      ms.security.tokencheck.enabled: Y
      temn.entitlement.stubbed.service.enabled: "true"
      JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
      JWT_TOKEN_ISSUER: "https://localhost:9443/oauth2/token"
      ID_TOKEN_SIGNED: "true"
      JWT_TOKEN_PUBLIC_KEY: "TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFuenlpczFaamZOQjBiQmdLRk1Tdg0KdmtUdHdsdkJzYUpxN1M1d0Era3plVk9WcFZXd2tXZFZoYTRzMzhYTS9wYS95cjQ3YXY3K3ozVlRtdkRSeUFIYw0KYVQ5MndoUkVGcEx2OWNqNWxUZUpTaWJ5ci9Ncm0vWXRqQ1pWV2dhT1lJaHdyWHdLTHFQci8xMWluV3NBa2ZJeQ0KdHZIV1R4WllFY1hMZ0FYRnVVdWFTM3VGOWdFaU5Rd3pHVFUxdjBGcWtxVEJyNEI4blczSENONDdYVXUwdDhZMA0KZStsZjRzNE94UWF3V0Q3OUo5LzVkM1J5MHZiVjNBbTFGdEdKaUp2T3dSc0lmVkNoRHBZU3RUY0hUQ01xdHZXYg0KVjZMMTFCV2twekdYU1c0SHY0M3FhK0dTWU9EMlFVNjhNYjU5b1NrMk9CK0J0T0xwSm9mbWJHRUdndm13eUNJOQ0KTXdJREFRQUI"
  stateingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40511:40501"
      - "8085:8080"
      - "36332:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-state
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.security.authz.enabled: "false"
      temn.ingester.business.group.id: msf-test-group-id
      temn.ingester.business.topic: table-update-business
      temn.msf.ingest.generic.ingester:  com.temenos.microservice.paymentorder.ingester.PaymentOrderStateIngester
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.iris.fdata.enquiry.base.path: http://10.93.23.52:9089/irf-provider-container/api/v1.0.0/
      temn.iris.fdata.enquiry.resource.path: system/metrics/dataEvents/pendings/itemCount
      temn.msf.security.authz.enabled: "false"
      EXECUTION_ENVIRONMENT: TEST
      temn.queue.impl: kafka
  businessingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40512:40500"
      - "8086:8080"
      - "36333:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-business
      temn.msf.ingest.source.stream.consumergroup.id: msf-test-group-id
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester:  com.temenos.microservice.paymentorder.ingester.PaymentOrderBusinessIngester
      temn.msf.stream.outbox.topic: paymentorder-event-topic
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.consumer.max.poll.records: "1"
      DATABASE_KEY: sql
      temn.queue.impl: kafka
  configBinaryIngester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40513:40500"
      - "8087:8080"
      - "36335:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-binary
      temn.msf.ingest.source.stream.consumergroup.id: msf-test-group-id
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.ConfigBasedBinaryIngestionFunctionImpl
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      PAYMENT_ORDEREvent: com.temenos.microservice.paymentorder.entity.PaymentOrder
      temn.config.file.path: mapping/
      EXECUTION_ENVIRONMENT: "TEST"
      temn.queue.impl: kafka
  eventingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40516:40500"
      - "8088:8080"
      - "36336:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: paymentorder-event-topic
      temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.enabled: "false"
      temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
      temn.msf.exec.env: server
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.paymentorder.function.CreateNewPaymentOrderImpl
      temn.msf.ingest.event.processor: com.temenos.microservice.paymentorder.ingester.EventHandlerImpl
      temn.msf.ingest.event.processor.POAccepted: com.temenos.microservice.paymentorder.ingester.PoHandlerImpl
      # temn.msf.raise.received.event: "true"
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      temn.queue.impl: kafka  
  fileingester:
    build:
      context: ${FILEINGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${FILEINGESTER_BASE_IMAGE}
        artifactid: ${fileingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG} ${ingester_jacoco_jvm_opts}
    image: ${FILEINGESTER_IMAGE}
    volumes:
      - '/usr/local/tomcat/temp'
      - '/usr/local/tomcat'
    depends_on:
      - db-service1
      - db-service2
      - db-service3
    ports:
      - "40520:40500"
      - "8091:8080"
      - "36337:36330"
    environment:
      DATABASE_KEY: mongodb
      MONGODB_DBNAME: ms_paymentorder
      MONGODB_CONNECTIONSTR: mongodb://mongo1:27017,mongo2:27017,mongo3:27017
      temn.msf.name: PaymentOrder
      temn.msf.security.authz.enabled: "false"
      VALIDATE_PAYMENT_ORDER: "false"
      temn.msf.ingest.file.source.path: /usr/local/tomcat/temp
      temn.msf.ingest.file.procesed.path: /usr/local/tomcat
      temn.msf.ingest.file.ingester: com.temenos.microservice.paymentorder.ingester.PoFileIngester