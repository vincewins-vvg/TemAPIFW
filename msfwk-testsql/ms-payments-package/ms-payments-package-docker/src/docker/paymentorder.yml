#-------------------------------------------------------------
#- Docker compose base definition file to run containers.
#-----------------------------------------------------------
---
version: '3.6'
services:
  db-service:
    build:
      context: ${DB_CONTEXT}
      dockerfile: Dockerfile
      args:
        DB_BASE_IMAGE: ${DB_BASE_IMAGE}
    image: ${DB_IMAGE}
    shm_size: '1gb'
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: payments
  
  api:
    build:
      context: ${API_CONTEXT}
      dockerfile: Dockerfile
      args:
        API_BASE_IMAGE: ${API_BASE_IMAGE}
        api_artifactid: ${api_artifactid}
        api_java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${API_IMAGE}
    depends_on:
      - db-service
    ports:
      - "8090:8080"
      - "40508:40500"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      className_CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
      className_CreateNewPaymentOrders: com.temenos.microservice.payments.function.CreateNewPaymentOrdersImpl
      className_UpdateNewPaymentOrders: com.temenos.microservice.payments.function.UpdateNewPaymentOrdersImpl
      VALIDATE_PAYMENT_ORDER: "false"
      className_GetPaymentOrders: com.temenos.microservice.payments.function.GetPaymentOrdersImpl
      className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
      className_DeletePaymentOrders: com.temenos.microservice.payments.function.DeletePaymentOrdersImpl
      className_GetPaymentOrder: com.temenos.microservice.payments.function.GetPaymentOrderImpl
      className_invokePaymentState: com.temenos.microservice.payments.function.InvokePaymentOrderImpl
      className_GetPaymentOrderCurrency: com.temenos.microservice.payments.function.GetPaymentOrderCurrencyImpl
      className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl  
      className_FileUpload: com.temenos.microservice.payments.function.FileUploadImpl
      className_createReferenceData: com.temenos.microservice.framework.core.data.referencedata.CreateReferenceDataImpl
      className_getReferenceData: com.temenos.microservice.framework.core.data.referencedata.GetReferenceDataImpl
      className_updateReferenceData: com.temenos.microservice.framework.core.data.referencedata.UpdateReferenceDataImpl
      className_addReferenceData: com.temenos.microservice.framework.core.data.referencedata.AddReferenceDataImpl
      className_deleteReferenceData: com.temenos.microservice.framework.core.data.referencedata.DeleteReferenceDataImpl
      className_FileDownload: com.temenos.microservice.payments.function.FileDownloadImpl   
      className_DoInputValidation: com.temenos.microservice.payments.function.DoInputValidationImpl
      API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.payments.core.BusinessConditionImpl
      DATABASE_KEY: sql
      PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
      temn.msf.name: PaymentOrder
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      serviceadaptor.preprocessorimpl.class: com.temenos.microservice.sample.security.SampleTokenGenerator
      temn.msf.stream.vendor: kafka
      temn.queue.impl: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: 10.92.14.71
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
      temn.msf.pdp.resource.type: API
      temn.msf.pdp.resource.manager: PAYMENT
      temn.msf.storage.home: ${MS_STORAGE_HOME}
      FILE_STORAGE_URL: ${FILE_STORAGE_URL}
      temn.msf.max.file.upload.size: ${MAX_FILE_UPLOAD_SIZE}
      ms.security.tokencheck.enabled: Y
      EXECUTION_ENVIRONMENT: "TEST"
  ingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40509:40500"
      - "8082:8080"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update
      temn.msf.ingest.source.stream.consumergroup.id: msf-test-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.security.authz.enabled: "false"
      temn.queue.impl: kafka
      temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
      PAYMENT_ORDEREvent: com.temenos.microservice.payments.ingester.PaymentorderIngesterUpdater
      DATABASE_KEY: sql
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: 10.92.14.71
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
      PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
      temn.msf.pdp.resource.type: API
      temn.msf.pdp.resource.manager: PAYMENT
  configavroingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40519:40500"
      - "8083:8080"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-paymentorder
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
      PAYMENT_ORDEREvent: com.temenos.microservice.payments.ingester.PaymentorderIngesterUpdater
      DATABASE_KEY: sql
      EXECUTION_ENVIRONMENT: "TEST"
      temn.queue.impl: kafka
      PAYMENT_ORDEREvent: com.temenos.microservice.payments.entity.PaymentOrder
      temn.config.file.path: mapping/
      temn.ingester.mapping.enabled: "true"
  
  
  stateingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40511:40501"
      - "8085:8080"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-state
      temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.security.authz.enabled: "false"
      temn.ingester.business.group.id: msf-test-group-id
      temn.ingester.business.topic: table-update-business
      temn.msf.ingest.generic.ingester:  com.temenos.microservice.payments.ingester.PaymentOrderStateIngester
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.iris.fdata.enquiry.base.path: http://10.92.4.84:9089/irf-provider-container/api/v1.0.0/
      temn.iris.fdata.enquiry.resource.path: system/events/pendingEvents
      temn.msf.security.authz.enabled: "false"
      temn.queue.impl: kafka
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      DATABASE_KEY: sql
      EXECUTION_ENVIRONMENT: TEST
  
  businessingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40512:40504"
      - "8086:8080"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.queue.impl: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-business
      temn.msf.ingest.source.stream.consumergroup.id: msf-test-group-id
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester:  com.temenos.microservice.payments.ingester.PaymentOrderBusinessIngester
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.is.avro.event.ingester: "false"
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.consumer.max.poll.records: "1"
      DATABASE_KEY: sql
      
  ingesterbinary:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40510:40500"
      - "8084:8080"
    environment:
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10        
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: ms-paymentorder-inbox-topic
      temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.stream: ms-paymentorder-inbox-error-topic
      temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
      temn.msf.exec.env: server
      temn.msf.stream.outbox.topic: ms-paymentorder-outbox-topic
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
      VALIDATE_PAYMENT_ORDER: "false"
      class.package.name: com.temenos.microservice.payments.function
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"
      DATABASE_KEY: sql
      temn.queue.impl: kafka
      IRIS_PROTOCOL: http
      IRIS_HOST_IP: 10.92.14.71
      IRIS_PORT: 9089
      IRIS_PATH: irf-provider-container/api
      IRIS_R18_PATH: irisR18/api
      IRIS_VERSION: v1.0.0
  configBinaryIngester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40513:40500"
      - "8087:8080"
    environment:
      DATABASE_KEY: sql
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.queue.impl: kafka
      temn.msf.schema.registry.url: http://schema-registry:8081
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: table-update-binary
      temn.msf.ingest.source.stream.consumergroup.id: msf-test-group-id
      temn.msf.ingest.sink.error.stream: error-paymentorder
      temn.msf.ingest.sink.error.stream.producer.id: msf-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.ConfigBasedBinaryIngestionFunctionImpl
      temn.msf.security.authz.enabled: "false"
      temn.msf.ingest.is.avro.event.ingester: "false"
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.security.authz.enabled: "false"
      PAYMENT_ORDEREvent: com.temenos.microservice.payments.entity.PaymentOrder
      temn.config.file.path: mapping/
      EXECUTION_ENVIRONMENT: "TEST"

  eventingester:
    build:
      context: ${INGESTER_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INGESTER_APP_BASE_IMAGE}
        artifactid: ${ingester_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INGESTER_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40516:40500"
      - "8088:8080"
    environment:
      DATABASE_KEY: sql
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.queue.impl: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.ingest.source.stream: paymentorder-event-topic
      temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
      temn.msf.ingest.sink.error.enabled: "false"
      temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
      temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
      temn.msf.exec.env: server
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
      temn.msf.ingest.event.processor: com.temenos.microservice.payments.ingester.EventHandlerImpl
      # temn.msf.raise.received.event: "true"
      class.package.name: com.temenos.microservice.payments.function
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.ingest.is.avro.event.ingester: "false"
      temn.msf.security.authz.enabled: "false"

  inboxoutboxprocessorapp:
    build:
      context: ${INBOXOUTBOX_CONTEXT}
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: ${INBOXOUTBOX_BASE_IMAGE}
        artifactid: ${inboxoutbox_artifactid}
        java_options: ${java_options} ${REMOTE_DEBUG}
    image: ${INBOXOUTBOX_IMAGE}
    depends_on:
      - db-service
    ports:
      - "40514:40500"
      - "8089:8080"
    environment:
      DATABASE_KEY: sql
      HOST: db-service
      PORT: 3306
      DATABASE_NAME: payments
      DB_USERNAME: root
      DB_PASSWORD: root
      DRIVER_NAME: com.mysql.jdbc.Driver
      DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      DB_CONNECTION_URL: jdbc:mysql://db-service:3306/payments
      MAX_POOL_SIZE: 150
      MIN_POOL_SIZE: 10  
      temn.msf.name: PaymentOrder
      temn.msf.stream.vendor: kafka
      temn.msf.stream.kafka.bootstrap.servers: kafka:29092
      temn.msf.exec.env: server
      temn.msf.stream.outbox.topic: ms-paymentorder-outbox-topic
      temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
      class.package.name: com.temenos.microservice.payments.function
      class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
      class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
      temn.msf.security.authz.enabled: "false"
      tmn.inbox.source.namespace: paymentorder-inbox
      tmn.outbox.source.namespace: paymentorder-outbox
      temn.queue.impl: kafka
      tmn.inbox.thread.pool.count: 10
      tmn.outbox.thread.pool.count: 10
      VALIDATE_PAYMENT_ORDER: "false"