#
# *******************************************************************************
# * Copyright Â© Temenos Headquarters SA 2021. All rights reserved.
# *******************************************************************************
#

# Default values for dbInitialisation.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#Name        : ReplicaCount
#Description : ReplicaCount is used to specify the number of Pod instances running in a cluster at any given time to prevent users from losing access to their application when a Pod fails or is inaccessible.
#Default Value: 1
replicaCount: 1
#Name        : image
#Description : If Images are  pushed to external repositories, the name of repositories, image and tag should be mentioned here. 
#Example     : Consider our external repository is "acr.azurecr.io" and tag is "21.0.0", then image references would be as follows:
image:
  sqlinit:
    repository: temenos/ms-paymentorder-initscripts
#Name       : pullPolicy
  #When creating the POD, one can specify the imagePullPolicyspecification, which guides the Kubelet service on how to pull the specified image during an update
   # 1. If imagePullPolicy is set to Always, Kubernetes will always pull the image from the Repository. 
   # 2. With IfNotPresent, Kubernetes will only pull the image when it does not already exist on the node.
   # 3. While with imagePullPolicy set to Never, Kubernetes will never pull the image. 
  pullPolicy: IfNotPresent
#Name       : tag
#Description : Overrides the image tag whose default is the chart appVersion.
  tag: DEV

#Name       : restartPolicy
#Description : The spec of a Pod has a restartPolicy field with possible values Always, OnFailure, and Never.If you'd like your container to be killed and restarted if a probe fails, then specify a liveness/readiness probe, and specify a restartPolicy of Always or OnFailure.
#Default Values : OnFailure
#Possible Values : Always | OnFailure

restartPolicy: OnFailure
#Name             : env
#Description      : Environmental variables are specified here
env:
#Name             : sqlinit
#Description      : database related parameters values are specified here.
  sqlinit:
    ##MySQL
 # specify the name of the database
    databaseKey:
 # specify the name of the database used in sql database server.
    databaseName: 
  # For connecting any hibernate application with the database, it is required to provide the configuration of SQL dialect.
    dbdialect: 
 # To run a SQL query or otherwise interact with a database, you generally first need to connect to the server. You supply a username (uid) and password that match a server login.
    dbusername: 
    dbpassword:
  # REM The general form of the connection URL is
    # REM  ex.  oracle:          jdbc:oracle:thin:@<host_or_ip>:1521:<db_name>
    # REM  ex.  db2:             jdbc:db2://<host_or_ip>:50000/<db_name>
    # REM  ex.  ms-sql:          jdbc:sqlserver://<host_or_ip>:1433;databaseName=<db_name>

    # REM We are using sql by default 

    # REM jdbc:sqlserver://[serverName[\instanceName][:portNumber]][;databaseName=<db_name>]
    # REM jdbc:sqlserver:// (Required) is known as the subprotocol and is constant.

    # REM serverName (Optional) is the address of the server to connect to. This address can be a DNS or IP address, or it can be localhost or 127.0.0.1 for the local computer. If not specified in the connection URL, the server name must be specified in the properties collection.

    # REM instanceName (Optional) is the instance to connect to on serverName. If not specified, a connection to the default instance is made.

    # REM portNumber (Optional) is the port to connect to on serverName. The default is 1433. If you're using the default, you don't have to specify the port, nor its preceding ':', in the URL.

    dbconnectionurl:
    
    ##MSSQL
    # databaseKey: sql
    # databaseName: ms_metering
    # dbdialect: org.hibernate.dialect.SQLServer2012Dialect
    # dbusername: sa
    # dbpassword: Rootroot@12345
    # dbconnectionurl: jdbc:sqlserver://localhost:1433  
    
 #If the below variable is set to "Y", secrets will be enabled for MySQL DB
    # A Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. 
    # DB_CRED is set to 'Y'. This will allow to fetch the DB username and DB password through k8s secrets for MySQL DB
    # Default value is N.
    DB_CRED: "N"
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Docker registry secret contains the Oracle Cloud Infrastructure credentials to use when pulling the image.You have to specify the image to pull from Container Registry, including the repository location and the Docker registry secret to use, in the application's manifest file

# kubectl create secret docker-registry <secret-name> --docker-server=<region-key>.ocir.io --docker-username='<tenancy-namespace>/<oci-username>' --docker-password='<oci-auth-token>' --docker-email='<email-address>'

# refer https://docs.oracle.com/en-us/iaas/Content/Registry/Tasks/registrypullingimagesfromocir.htm#:~:text=To%20create%20a%20Docker%20registry%20secret%3A

# imagePullSecrets Specifies the <secret-name>, that will be used in the manifest file to refer to the already created secret. 
imagePullSecrets:
