#
# *******************************************************************************
# * Copyright Â© Temenos Headquarters SA 2021. All rights reserved.
# *******************************************************************************
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-api-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  VALIDATE_PAYMENT_ORDER: "false"
  className_CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  className_GetPaymentOrders: com.temenos.microservice.payments.function.GetPaymentOrdersImpl
  className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
  className_GetPaymentOrder: com.temenos.microservice.payments.function.GetPaymentOrderImpl
  className_invokePaymentState: com.temenos.microservice.payments.function.InvokePaymentOrderImpl
  className_GetPaymentOrderCurrency: com.temenos.microservice.payments.function.GetPaymentOrderCurrencyImpl
  className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl
  className_CreateNewPaymentOrders: com.temenos.microservice.payments.function.CreateNewPaymentOrdersImpl
  className_UpdateNewPaymentOrders: com.temenos.microservice.payments.function.UpdateNewPaymentOrdersImpl
  className_DeletePaymentOrders: com.temenos.microservice.payments.function.DeletePaymentOrdersImpl
  className_FileUpload: com.temenos.microservice.payments.function.FileUploadImpl
  className_createReferenceData: com.temenos.microservice.framework.core.data.referencedata.CreateReferenceDataImpl
  className_getReferenceData: com.temenos.microservice.framework.core.data.referencedata.GetReferenceDataImpl
  className_updateReferenceData: com.temenos.microservice.framework.core.data.referencedata.UpdateReferenceDataImpl
  className_addReferenceData: com.temenos.microservice.framework.core.data.referencedata.AddReferenceDataImpl
  className_deleteReferenceData: com.temenos.microservice.framework.core.data.referencedata.DeleteReferenceDataImpl
  className_FileDownload: com.temenos.microservice.payments.function.FileDownloadImpl
  className_DoInputValidation: com.temenos.microservice.payments.function.DoInputValidationImpl
  className_GetInputValidation: com.temenos.microservice.payments.function.GetInputValidationImpl
  className_CreateEmployee: com.temenos.microservice.payments.function.CreateEmployeeImpl
  className_GetEmployee: com.temenos.microservice.payments.function.GetEmployeeImpl
  className_UpdateEmployee: com.temenos.microservice.payments.function.UpdateEmployeeImpl
  className_DeleteEmployee: com.temenos.microservice.payments.function.DeleteEmployeeImpl
  className_GetAccountValidate: com.temenos.microservice.paymentorder.function.GetAccountValidateImpl
  className_getDbMigrationStatus: com.temenos.microservice.framework.dbmigration.core.GetDbMigrationStatusImpl  
  API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.payments.core.BusinessConditionImpl
  className_ReprocessEvents: com.temenos.microservice.framework.core.error.function.ReprocessEventsImpl
  className_GetErrorEvents: com.temenos.microservice.framework.core.error.function.GetErrorEventsImpl
  class.package.name: com.temenos.microservice.payments.function
  temn.msf.ingest.reprocess.source.stream: reprocess-event
  IRIS_PROTOCOL: http
  IRIS_HOST_IP: "10.92.14.71"
  IRIS_PORT: "9089"
  IRIS_PATH: irf-provider-container/api
  IRIS_R18_PATH: irisR18/api
  IRIS_VERSION: "v1.0.0"
  temn.msf.name: ms-paymentorder
  temn.msf.service: API 
  PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  temn.msf.pdp.resource.type: API
  temn.msf.pdp.resource.manager: PAYMENT
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn.msf.storage.home: path:/tomcat/temp
  FILE_STORAGE_URL: /demo.properties
  temn.msf.max.file.upload.size: "70"
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
  # temn.config.service.base.path: http://10.92.201.101:7006/ms-genericconfig-api/api/v1.0.0/
  # temn.config.service.resource.path: system/configurationGroups/{groupId}/configuration/{configName}  
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-avro-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.schema.registry.url: {{ .Values.env.kafka.schema_registry_url | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: AvroIngester
  temn.msf.disableInbox: "true"
  temn.msf.security.authz.enabled: "false"
  temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
  PAYMENT_ORDEREvent: com.temenos.microservice.payments.entity.PaymentOrder
  temn.config.file.path: mapping/
  temn.ingester.mapping.enabled: "true"
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.avrotopic | quote }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.sourcestream_consumergroupid | quote }}
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.errortopic | quote }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstream_producerid | quote }}
  temn.msf.ingest.multipart.source.stream: multipart-topic
  temn.msf.ingest.reprocess.source.stream: reprocess-event
  temn.msf.ingest.sink.stream.data.multipart: multipart-topic
  temn.msf.ingest.multipart.source.stream.consumergroup.id: multipart-1
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }} 
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }} 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-data-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.schema.registry.url: {{ .Values.env.kafka.schema_registry_url | quote }}
  temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
  PAYMENT_ORDEREvent: com.temenos.microservice.payments.ingester.PaymentorderIngesterUpdater
  IRIS_PROTOCOL: http
  IRIS_HOST_IP: "10.92.14.71"
  IRIS_PORT: "9089"
  IRIS_PATH: irf-provider-container/api
  IRIS_R18_PATH: irisR18/api
  IRIS_VERSION: "v1.0.0"
  PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  temn.msf.pdp.resource.type: API
  temn.msf.pdp.resource.manager: PAYMENT
  temn.msf.name: ms-paymentorder 
  temn.msf.service: DataIngester 
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.avrodatatopic | quote }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.sourcestream_consumergroupid | quote }}
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.errortopic | quote }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstream_producerid | quote }}
  temn.msf.security.authz.enabled: "false"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-command-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: CommandIngester 
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.inboxtopic | quote }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.sourcestream_consumergroupid | quote }}
  temn.msf.ingest.sink.error.stream: {{ .Values.kafkatopic.inboxerrortopic | quote }}
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstream_producerid | quote }}
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: server
  temn.msf.stream.outbox.topic: paymentorder-outbox-topic
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
  class.package.name: com.temenos.microservice.payments.function
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false"
  java_options: {{ .Values.resources.ingester.java.heaplimit }}
  IRIS_PROTOCOL: http
  IRIS_HOST_IP: "10.92.14.71"
  IRIS_PORT: "9089"
  IRIS_PATH: irf-provider-container/api
  IRIS_R18_PATH: irisR18/api
  IRIS_VERSION: "v1.0.0"
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  temn.msf.mdal.keys.MDLPAT.Paymentorder.paymentorder: getCustomerProfile
  temn.msf.mdal.operationId.getCustomerProfile: GetPaymentOrder
  temn.cache.host: "192.168.1.34"
  temn.cache.port: "6060"
  class.package.name: com.temenos.microservice.payments.function
  temn.config.service.base.path: http://192.168.1.34:7006/ms-genericconfig-api/
  temn.config.service.resource.path: api/v2.0.0/system/configurationGroups/{}/configuration/{}
  temn.msf.exec.env: server
  temn.msf.function.class.ProcessBulkMdalEvent: com.temenos.microservice.framework.core.mdal.ProcessBulkMdalEventImpl
  className_GetPaymentOrder: com.temenos.microservice.payments.function.GetPaymentOrderImpl
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-command-inbox-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: CommandIngester 
  temn.msf.ingest.source.stream: paymentorder-inbox-topic
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.sourcestream_consumergroupid | quote }}
  temn.msf.ingest.sink.error.stream: paymentorder-inbox-error-topic
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstream_producerid | quote }}
  temn.msf.ingest.generic.ingester: com.temenos.microservice.payments.ingester.POCommandIngester
  temn.msf.exec.env: server
  temn.msf.stream.outbox.topic: paymentorder-outbox-topic
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false"
  IRIS_PROTOCOL: http
  IRIS_HOST_IP: "10.92.14.71"
  IRIS_PORT: "9089"
  IRIS_PATH: irf-provider-container/api
  IRIS_R18_PATH: irisR18/api
  IRIS_VERSION: "v1.0.0"
  ms.security.tokencheck.enabled: "N"
  temn.msf.outbox.direct.delivery.enabled: "true"
  temn.entitlement.stubbed.service.enabled: "true"
  temn.msf.mdal.keys.MDLPAT.Paymentorder.paymentorder: getCustomerProfile
  temn.msf.mdal.operationId.getCustomerProfile: GetPaymentOrder
  temn.cache.host: "192.168.1.34"
  temn.cache.port: "6060"
  temn.config.service.base.path: http://192.168.1.34:7006/ms-genericconfig-api/
  temn.config.service.resource.path: api/v2.0.0/system/configurationGroups/{}/configuration/{}
  temn.msf.exec.env: server
  java_options: {{ .Values.resources.ingester.java.heaplimit }}
  temn.msf.function.class.ProcessBulkMdalEvent: com.temenos.microservice.framework.core.mdal.ProcessBulkMdalEventImpl
  className_GetPaymentOrder: com.temenos.microservice.payments.function.GetPaymentOrderImpl
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-event-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: EventIngester
  temn.msf.ingest.source.stream: {{ .Values.kafkatopic.eventtopic | quote }}
  temn.msf.ingest.source.stream.consumergroup.id: {{ .Values.kafkatopic.sourcestream_consumergroupid | quote }}
  temn.msf.ingest.sink.error.enabled: "false"
  temn.msf.ingest.sink.error.stream.producer.id: {{ .Values.kafkatopic.errorstream_producerid | quote }}
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: server
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  temn.msf.ingest.event.processor: com.temenos.microservice.payments.ingester.EventHandlerImpl
  temn.msf.ingest.event.processor.POAccepted: com.temenos.microservice.payments.ingester.PoHandlerImpl
  java_options: {{ .Values.resources.eventingester.java.heaplimit }}
# temn.msf.raise.received.event: "true"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false"
  JWT_TOKEN_ISSUER: {{ .Values.pit.JWT_TOKEN_ISSUER | quote }}
  JWT_TOKEN_PRINCIPAL_CLAIM: {{ .Values.pit.JWT_TOKEN_PRINCIPAL_CLAIM | quote }}
  ID_TOKEN_SIGNED: {{ .Values.pit.ID_TOKEN_SIGNED | quote }}
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED | quote }}
  JWT_TOKEN_PUBLIC_KEY: {{ .Values.pit.JWT_TOKEN_PUBLIC_KEY| quote }}
  temn.msf.security.tokengen.oauth.url: "http://10.92.201.101:8180/auth/realms/msf/protocol/openid-connect/token"
  temn.msf.security.tokengen.oauth.grant.type: "client_credentials"
  temn.msf.security.tokengen.oauth.client.id : "msfauthcode"   
  temn.msf.security.tokengen.oauth.scope: "openid"
  serviceadaptor.preprocessorimpl.class: "com.temenos.microservice.framework.core.security.GenerateKeycloakToken"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }} 
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-eventdelivery-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: EventDelivery 
  temn.msf.exec.env: server
  temn.msf.stream.outbox.topic: paymentorder-outbox-topic
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  temn.msf.security.authz.enabled: "false"
  tmn.inbox.source.namespace: paymentorder-inbox
  tmn.outbox.source.namespace: paymentorder-outbox
  tmn.inbox.thread.pool.count: "10"
  tmn.outbox.thread.pool.count: "10"
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.is.cloud.event: "true"  
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}  
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-scheduler-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_USERNAME: {{ .Values.env.database.db_username | quote }}
  DB_PASSWORD: {{ .Values.env.database.db_password | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  java_options: {{ .Values.resources.ingester.java.heaplimit }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.executor.schedule: {{ .Values.env.paymentorderscheduler.schedule | quote }}
  temn.msf.executor.schedule.timeunit: {{ .Values.env.paymentorderscheduler.timeunit | quote }}
  temn.msf.function.class.paymentscheduler: com.temenos.microservice.payments.scheduler.PaymentOrderScheduler
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn.msf.name: ms-paymentorder
  temn.msf.service: Scheduler   
  temn.msf.security.authz.enabled: "false" 
  className_paymentscheduler: com.temenos.microservice.paymentorder.scheduler.PaymentOrderScheduler 
  className_sqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlInboxCatchupProcessor
  className_sqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlOutboxCatchupProcessor
  operationId: sqlOutboxCatchup
  temn.msf.outbox.direct.delivery.enabled: "true"
  temn.msf.scheduler.time.delay: "0"
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }} 
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sqlinboxcatchup-scheduler-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: sqlinboxcatchup-scheduler-config
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_USERNAME: {{ .Values.env.database.db_username | quote }}
  DB_PASSWORD: {{ .Values.env.database.db_password | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  java_options: {{ .Values.resources.ingester.java.heaplimit }}
  temn.msf.db.pass.encryption.key: {{ .Values.env.database.temn_msf_db_pass_encryption_key | quote }}
  temn.msf.db.pass.encryption.algorithm: {{ .Values.env.database.temn_msf_db_pass_encryption_algorithm | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.executor.schedule: {{ .Values.env.paymentorderscheduler.schedule | quote }}
  temn.msf.executor.schedule.timeunit: {{ .Values.env.paymentorderscheduler.timeunit | quote }}
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn.msf.name: paymentorder  
  temn.msf.security.authz.enabled: "false" 
  operationId : sqlInboxCatchup
  temn.msf.outbox.direct.delivery.enabled: "true"  
  className_sqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlInboxCatchupProcessor
  temn.msf.scheduler.inboxcleanup.schedule: {{ .Values.env.sqlinboxcatchupscheduler.temn_msf_scheduler_inboxcleanup_schedule | quote }}
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-file-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.name: ms-paymentorder
  temn.msf.service: FileIngester 
  temn.msf.security.authz.enabled: "false"
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.file.source.path: /var/lib/fileingesterstorage
  temn.msf.ingest.file.procesed.path: /var/lib
  temn.msf.ingest.file.ingester: com.temenos.microservice.payments.ingester.PoFileIngester 
  temn.msf.stream.vendor: kafka
  temn.msf.ingest.sink.stream: table-update-splitData
  temn.msf.ingest.client.id: split-group
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.ingest.max.load.topic: "2" 
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
  
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-mdal-config
  namespace: {{.Values.paymentsnamespace}}
  labels:
    app.kubernetes.io/name: payments
    helm.sh/chart: {{ include "payments.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:  
  DATABASE_KEY: {{ .Values.env.database.database_key | quote }}
  HOST: {{ .Values.env.database.host | quote }}
  DATABASE_NAME: {{ .Values.env.database.database_name | quote }}
  DRIVER_NAME: {{ .Values.env.database.driver_name | quote }}
  DIALECT: {{ .Values.env.database.dialect | quote }}
  DB_CONNECTION_URL: {{ .Values.env.database.db_connection_url | quote }}
  MAX_POOL_SIZE: {{ .Values.env.database.max_pool_size | quote }}
  MIN_POOL_SIZE: {{ .Values.env.database.min_pool_size | quote }}
  temn.msf.stream.vendor: {{ .Values.env.kafka.temnmsfstreamvendor | quote }}
  temn.queue.impl: {{ .Values.env.kafka.temnqueueimpl | quote }}
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn_msf_name: paymentorder  
  temn.msf.service: MdalConfig 
  temn_msf_security_authz_enabled: "false" 
  className_sqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlInboxCatchupProcessor
  className_sqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlOutboxCatchupProcessor
  temn.msf.scheduler.mdalcacheupdate.cron.trigger.time: 59 * * ? * *
  temn_msf_function_class_mdalcacheupdate: com.temenos.microservice.framework.core.bulk.InvokeEntityExtractFunction
  temn.msf.data.entity.class.paymentorder: com.temenos.microservice.payments.entity.PaymentOrder
  temn.msf.disableInbox: "true"
  temn.msf.mdal.bulk.eventproducer.paymentorder: com.temenos.microservice.payments.event.BulkMDAEventsProducer
  temn.msf.security.authz.enabled: "false"
  temn.msf.stream.kafka.bootstrap.servers: {{ .Values.env.kafka.kafkabootstrapservers | quote }}
  temn.msf.entityExtractFunction.param.pageSize: "2"
  temn.msf.entityExtractFunction.param.entityName: paymentorder
  temn.msf.entityExtractFunction.param.query.currency: USD
  operationId: mdalcacheupdate
{{- if .Values.logging.exportType }}        
  temn.msf.logger.exportType: {{ .Values.logging.exportType }}            
{{- if eq .Values.logging.exportType "socket" }}   
  temn.msf.logger.socketHost: {{ .Values.logging.socketHost | quote }}
  temn.msf.logger.socketPort: {{ .Values.logging.socketPort | quote}}
  temn.msf.logger.protocol: {{ .Values.logging.protocol | quote}}
{{- end }}    
{{- end }}  
{{- if .Values.metrics.metricsDisabled | quote }}        
  temn.meter.disabled: {{ .Values.metrics.metricsDisabled | quote }}            
{{- if eq .Values.metrics.metricsDisabled "false" }}   
  temn.meter.exporter.host: {{ .Values.metrics.exporterHost | quote }}
  temn.meter.exporter.port: {{ .Values.metrics.exporterPort | quote}}
{{- end }}    
{{- end }}
{{- if .Values.tracing.enabled }}        
  temn.msf.tracer.enabled: {{ .Values.tracing.enabled | quote}}           
  temn.msf.tracer.name: ms_adapter_api
  temn.tracer.port: {{ .Values.tracing.port | quote}} 
  temn.tracer.host: {{ .Values.tracing.host | quote}}   
{{- end }}
---