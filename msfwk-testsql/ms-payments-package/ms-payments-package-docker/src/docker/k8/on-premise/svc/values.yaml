#
# *******************************************************************************
# * Copyright Â© Temenos Headquarters SA 2021. All rights reserved.
# *******************************************************************************
#

# Default values for holdingsmsvc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
ReplicaCount:
  paymentsapiReplicaCount: 1
  paymentsingesterReplicaCount: 1
  topicreplicacount: 1
  schemaregistryreplicacount: 1

paymentsnamespace: payments


apideployment: payments-api
schemaregistry: schema-registry
schemaregistrysvc: schema-registry-svc

kafkatopic:
  avrotopic: table-update-paymentorder
  avrodatatopic: table-update
  outboxtopic: paymentorder-outbox
  eventstoretopic: ms-eventstore-inbox-topic
  inboxtopic: ms-paymentorder-inbox-topic
  eventtopic: paymentorder-event-topic
  errortopic: error-paymentorder
  inboxerrortopic: ms-paymentorder-inbox-error-topic
  multiparttopic: multipart-topic
  sourcestream_consumergroupid: ms-paymentorder-ingester-consumer
  errorstream_producerid: ms-paymentorder-ingester-error-producer
  retentionms: 7200000
  segmentbytes: 1073741824
  topicpartitions: 3

image:
  paymentsapi:
    repository: temenos/ms-paymentorder-service
    tag: DEV
    pullPolicy: Never
  paymentsingester:
    repository: temenos/ms-paymentorder-ingester
    tag: DEV
    pullPolicy: Never
  paymentseventdelivery:
    repository: temenos/ms-paymentorder-inboxoutbox
    tag: DEV
    pullPolicy: Never
  schemaregistry:
    repository: confluentinc/cp-schema-registry
    tag: 5.3.0
    pullPolicy: Never
  paymentorderscheduler:
    repository: temenos/ms-paymentorder-scheduler
    tag: DEV
    pullPolicy: Never 
  mysql: 
    repository: ms-paymentorder-mysql
    tag: latest
    pullPolicy: Never
  fileingester:
    repository: temenos/ms-paymentorder-fileingester
    tag: DEV
    pullPolicy: Never



env:
  database:
    database_key: sql
    host: host.docker.internal
    database_name: payments
    driver_name: oracle.jdbc.OracleDriver
    dialect: org.hibernate.dialect.Oracle10gDialect
    db_connection_url: jdbc:oracle:thin:@host.docker.internal:1521:orcl
    max_pool_size: "150"
    min_pool_size: "10" 
    MYSQL_CRED: "N"
    MSSQL_CRED: "N"
    
    # database_key: sql
    # host: eventstore-db-service
    # database_name: ms_eventstore
    # db_username: sa
    # db_password: Rootroot@12345
    #use the below variable to enable encryption
    #db_password : ENC(0jDFL9aa9VbB/KfSH6zfEQ==) 
    # driver_name: com.microsoft.sqlserver.jdbc.SQLServerDriver
    # dialect: org.hibernate.dialect.SQLServer2012Dialect
    # db_connection_url: jdbc:sqlserver://eventstore-db-service:1433;databaseName=ms_eventstore
    # max_pool_size: "150"
    # min_pool_size: "10"
    
    #Use the below 2 variables to decrypt the encrypted password
    temn_msf_db_pass_encryption_key: temenos
    temn_msf_db_pass_encryption_algorithm: PBEWithMD5AndTripleDES    
  kafka:
    temnmsfstreamvendor: kafka
    temnqueueimpl: kafka
    generic_ip: 127.0.0.1
    kafkabootstrapservers: my-cluster-kafka-bootstrap.kafka:9092
    schema_registry_url: http://schema-registry-svc.kafka.svc.cluster.local
    kafkaip:
    kafka0ip:
    kafka1ip:
    kafka2ip:
    devdomain:
    
    kafkaHostName:
    kafka0HostName:
    kafka1HostName:
    kafka2HostName:
    devdomainHostName:
        
  schemaregistry:
    SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://my-cluster-kafka-bootstrap.kafka:9092
    SCHEMA_REGISTRY_HOST_NAME: schema-registry
    SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    SCHEMA_REGISTRY_CUB_KAFKA_TIMEOUT: "500"
    SCHEMA_REGISTRY_CUB_ZK_TIMEOUT: "500"
    SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
  paymentorderscheduler:
    temn_msf_name: PaymentOrder  
    temn_msf_security_authz_enabled: "false" 
    className_paymentscheduler: com.temenos.microservice.paymentorder.scheduler.PaymentOrderScheduler 
    className_sqlInboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlInboxCatchupProcessor
    className_sqlOutboxCatchup: com.temenos.microservice.framework.scheduler.core.SqlOutboxCatchupProcessor
    operationId: paymentscheduler
    schedule: 5
  sqlinboxcatchupscheduler:
     temn_msf_scheduler_inboxcleanup_schedule: "60" 

service:
  paymentsapi:
    type: LoadBalancer
    port: 80
  schemaregistry:
    type: ClusterIP
    port: 80
    targetport: 8081
  schemaregistrynp:
    type: NodePort
    port: 8081
    nodeport: 32101 

external:
  enabled: true
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

logging:
#  socketHost: #ipaddress
#  socketPort: #port
  exportType: #socket (console,socket)
  
metrics:
  #publisherPort: 9091 
  #publisherHost: 192.168.228.193
  metricsDisabled: "true"
  
pit:
  JWT_TOKEN_ISSUER:
  JWT_TOKEN_PRINCIPAL_CLAIM:
  ID_TOKEN_SIGNED:
  JWT_TOKEN_PUBLIC_KEY:
  JWT_TOKEN_PUBLIC_KEY_CERT_ENCODED:  
  # targetMemoryUtilizationPercentage: 80

imagePullSecrets:  
