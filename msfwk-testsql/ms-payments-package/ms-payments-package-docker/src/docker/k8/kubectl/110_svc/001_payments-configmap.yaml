#
# *******************************************************************************
# * Copyright Â© Temenos Headquarters SA 2021. All rights reserved.
# *******************************************************************************
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-api-config
  namespace: payments
data:
  DATABASE_KEY: sql
  HOST: payments-db-service
  DATABASE_NAME: payments
  DB_USERNAME: root
  DB_PASSWORD: password
  DRIVER_NAME: com.mysql.jdbc.Driver
  DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
  DB_CONNECTION_URL: jdbc:mysql://paymentorder-db-service:3306/payments
  MAX_POOL_SIZE: "5"
  MIN_POOL_SIZE: "1"
  VALIDATE_PAYMENT_ORDER: "false"
  className_CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  className_GetPaymentOrders: com.temenos.microservice.payments.function.GetPaymentOrdersImpl
  className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
  className_GetPaymentOrder: com.temenos.microservice.payments.function.GetPaymentOrderImpl
  className_invokePaymentState: com.temenos.microservice.payments.function.InvokePaymentOrderImpl
  className_GetPaymentOrderCurrency: com.temenos.microservice.payments.function.GetPaymentOrderCurrencyImpl
  className_getHealthCheck: com.temenos.microservice.framework.core.health.GetHealthCheckImpl
  className_CreateNewPaymentOrders: com.temenos.microservice.payments.function.CreateNewPaymentOrdersImpl
  className_UpdateNewPaymentOrders: com.temenos.microservice.payments.function.UpdateNewPaymentOrdersImpl
  className_DeletePaymentOrders: com.temenos.microservice.payments.function.DeletePaymentOrdersImpl
  className_FileUpload: com.temenos.microservice.payments.function.FileUploadImpl
  className_createReferenceData: com.temenos.microservice.framework.core.data.referencedata.CreateReferenceDataImpl
  className_getReferenceData: com.temenos.microservice.framework.core.data.referencedata.GetReferenceDataImpl
  className_updateReferenceData: com.temenos.microservice.framework.core.data.referencedata.UpdateReferenceDataImpl
  className_addReferenceData: com.temenos.microservice.framework.core.data.referencedata.AddReferenceDataImpl
  className_deleteReferenceData: com.temenos.microservice.framework.core.data.referencedata.DeleteReferenceDataImpl
  className_FileDownload: com.temenos.microservice.payments.function.FileDownloadImpl
  className_DoInputValidation: com.temenos.microservice.payments.function.DoInputValidationImpl
  className_GetInputValidation: com.temenos.microservice.payments.function.GetInputValidationImpl
  className_CreateEmployee: com.temenos.microservice.payments.function.CreateEmployeeImpl
  className_GetEmployee: com.temenos.microservice.payments.function.GetEmployeeImpl
  className_UpdateEmployee: com.temenos.microservice.payments.function.UpdateEmployeeImpl
  className_DeleteEmployee: com.temenos.microservice.payments.function.DeleteEmployeeImpl
  className_GetAccountValidate: com.temenos.microservice.paymentorder.function.GetAccountValidateImpl
  API_HEALTH_CHECK_BUSINESS_CONDITION: com.temenos.microservice.payments.core.BusinessConditionImpl
  temn.msf.name: PaymentOrder
  PDP_CONFIG: classpath:xacml/payments-pdp-config.xml
  temn.msf.pdp.resource.type: API
  temn.msf.pdp.resource.manager: PAYMENT
  temn.msf.stream.vendor: kafka
  temn.queue.impl: kafka
  temn.msf.ingest.is.cloud.event: "true"
  temn.msf.stream.kafka.bootstrap.servers: payments-Kafka.servicebus.windows.net:9093
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn.msf.storage.home: path:/tomcat/temp
  FILE_STORAGE_URL: /demo.properties
  temn.msf.max.file.upload.size: "70"
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  JWT_TOKEN_ISSUER: https://localhost:9443/oauth2/token
  JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
  ID_TOKEN_SIGNED: "true"
  JWT_TOKEN_PUBLIC_KEY: "TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFuenlpczFaamZOQjBiQmdLRk1Tdg0KdmtUdHdsdkJzYUpxN1M1d0Era3plVk9WcFZXd2tXZFZoYTRzMzhYTS9wYS95cjQ3YXY3K3ozVlRtdkRSeUFIYw0KYVQ5MndoUkVGcEx2OWNqNWxUZUpTaWJ5ci9Ncm0vWXRqQ1pWV2dhT1lJaHdyWHdLTHFQci8xMWluV3NBa2ZJeQ0KdHZIV1R4WllFY1hMZ0FYRnVVdWFTM3VGOWdFaU5Rd3pHVFUxdjBGcWtxVEJyNEI4blczSENONDdYVXUwdDhZMA0KZStsZjRzNE94UWF3V0Q3OUo5LzVkM1J5MHZiVjNBbTFGdEdKaUp2T3dSc0lmVkNoRHBZU3RUY0hUQ01xdHZXYg0KVjZMMTFCV2twekdYU1c0SHY0M3FhK0dTWU9EMlFVNjhNYjU5b1NrMk9CK0J0T0xwSm9mbWJHRUdndm13eUNJOQ0KTXdJREFRQUI"
  temn.msf.stream.security.kafka.security.protocol: SASL_SSL
  temn.msf.stream.kafka.sasl.mechanism: PLAIN
  temn.msf.stream.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="Endpoint=sb://payments-kafka.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=8PAshRcMHZ5w35NnkyCxkJllly3wHQe7TffYNU29sJQ=";
  temn.msf.stream.kafka.ssl.enabled: "true"
  temn.msf.outbox.direct.delivery.enabled: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-avro-config
  namespace: payments
data:
  DATABASE_KEY: sql
  HOST: payments-db-service
  DATABASE_NAME: payments
  DB_USERNAME: root
  DB_PASSWORD: password
  DRIVER_NAME: com.mysql.jdbc.Driver
  DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
  DB_CONNECTION_URL: jdbc:mysql://paymentorder-db-service:3306/payments
  MAX_POOL_SIZE: "5"
  MIN_POOL_SIZE: "1"
  temn.msf.name: PaymentOrder
  temn.msf.disableInbox: "true"
  temn.msf.security.authz.enabled: "false"
  #EXECUTION_ENV: TEST
  temn.msf.ingest.event.ingester: com.temenos.microservice.framework.core.ingester.MicroserviceIngester
  PAYMENT_ORDEREvent: com.temenos.microservice.payments.entity.PaymentOrder
  temn.msf.schema.registry.url: http://20.49.157.6:8081
  temn.config.file.path: mapping/
  temn.ingester.mapping.enabled: "true"
  temn.msf.stream.kafka.bootstrap.servers: payments-Kafka.servicebus.windows.net:9093
  temn.msf.ingest.source.stream: table-update-paymentorder
  temn.msf.ingest.source.stream.consumergroup.id: msf-paymentorder-ingester-consumer
  temn.msf.ingest.sink.error.stream: error-paymentorder
  temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
  temn.msf.stream.security.kafka.security.protocol: SASL_SSL
  temn.msf.stream.kafka.sasl.mechanism: PLAIN
  temn.msf.stream.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="Endpoint=sb://payments-kafka.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=8PAshRcMHZ5w35NnkyCxkJllly3wHQe7TffYNU29sJQ=";
  temn.msf.stream.kafka.ssl.enabled: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-command-config
  namespace: payments
data:
  DATABASE_KEY: sql
  HOST: payments-db-service
  DATABASE_NAME: payments
  DB_USERNAME: root
  DB_PASSWORD: password
  DRIVER_NAME: com.mysql.jdbc.Driver
  DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
  DB_CONNECTION_URL: jdbc:mysql://paymentorder-db-service:3306/payments
  MAX_POOL_SIZE: "5"
  MIN_POOL_SIZE: "1"
  temn.msf.name: PaymentOrder
  temn.msf.stream.vendor: kafka
  temn.msf.stream.kafka.bootstrap.servers: payments-Kafka.servicebus.windows.net:9093
  temn.msf.ingest.source.stream: paymentorder-inbox-topic
  temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
  temn.msf.ingest.sink.error.stream: ms-paymentorder-inbox-error-topic
  temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: server
  temn.msf.stream.outbox.topic: paymentorder-outbox-topic
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  className_UpdatePaymentOrder: com.temenos.microservice.payments.function.UpdatePaymentOrderImpl
  VALIDATE_PAYMENT_ORDER: "false"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.security.authz.enabled: "false"
  temn.queue.impl: kafka
  IRIS_PROTOCOL: http
  IRIS_HOST_IP: "10.92.14.71"
  IRIS_PORT: "9089"
  IRIS_PATH: irf-provider-container/api
  IRIS_R18_PATH: irisR18/api
  IRIS_VERSION: "v1.0.0"
  ms.security.tokencheck.enabled: "Y"
  temn.entitlement.stubbed.service.enabled: "true"
  JWT_TOKEN_PRINCIPAL_CLAIM: "sub"
  JWT_TOKEN_ISSUER: "https://localhost:9443/oauth2/token"
  ID_TOKEN_SIGNED: "true"
  JWT_TOKEN_PUBLIC_KEY: "TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFuenlpczFaamZOQjBiQmdLRk1Tdg0KdmtUdHdsdkJzYUpxN1M1d0Era3plVk9WcFZXd2tXZFZoYTRzMzhYTS9wYS95cjQ3YXY3K3ozVlRtdkRSeUFIYw0KYVQ5MndoUkVGcEx2OWNqNWxUZUpTaWJ5ci9Ncm0vWXRqQ1pWV2dhT1lJaHdyWHdLTHFQci8xMWluV3NBa2ZJeQ0KdHZIV1R4WllFY1hMZ0FYRnVVdWFTM3VGOWdFaU5Rd3pHVFUxdjBGcWtxVEJyNEI4blczSENONDdYVXUwdDhZMA0KZStsZjRzNE94UWF3V0Q3OUo5LzVkM1J5MHZiVjNBbTFGdEdKaUp2T3dSc0lmVkNoRHBZU3RUY0hUQ01xdHZXYg0KVjZMMTFCV2twekdYU1c0SHY0M3FhK0dTWU9EMlFVNjhNYjU5b1NrMk9CK0J0T0xwSm9mbWJHRUdndm13eUNJOQ0KTXdJREFRQUI"
  temn.msf.stream.security.kafka.security.protocol: SASL_SSL
  temn.msf.stream.kafka.sasl.mechanism: PLAIN
  temn.msf.stream.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="Endpoint=sb://payments-kafka.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=8PAshRcMHZ5w35NnkyCxkJllly3wHQe7TffYNU29sJQ=";
  temn.msf.stream.kafka.ssl.enabled: "true"
  temn.msf.outbox.direct.delivery.enabled: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-ingester-event-config
  namespace: payments
data:  
  DATABASE_KEY: sql
  HOST: payments-db-service
  DB_USERNAME: root
  DB_PASSWORD: password
  DATABASE_NAME: payments
  DRIVER_NAME: com.mysql.jdbc.Driver
  DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
  DB_CONNECTION_URL: jdbc:mysql://paymentorder-db-service:3306/payments
  MAX_POOL_SIZE: "5"
  MIN_POOL_SIZE: "1"
  temn.msf.name: PaymentOrder
  temn.msf.stream.vendor: kafka
  temn.queue.impl: kafka
  temn.msf.stream.kafka.bootstrap.servers: payments-Kafka.servicebus.windows.net:9093
  temn.msf.ingest.source.stream: paymentorder-event-topic
  temn.msf.ingest.source.stream.consumergroup.id: ms-paymentorder-ingester-consumer
  temn.msf.ingest.sink.error.enabled: "false"
  temn.msf.ingest.sink.error.stream.producer.id: ms-paymentorder-ingester-error-producer
  temn.msf.ingest.generic.ingester: com.temenos.microservice.framework.core.ingester.GenericCommandSTBinaryIngester
  temn.msf.exec.env: server
  temn.msf.function.class.CreateNewPaymentOrder: com.temenos.microservice.payments.function.CreateNewPaymentOrderImpl
  temn.msf.ingest.event.processor: com.temenos.microservice.payments.ingester.EventHandlerImpl
  temn.msf.ingest.event.processor.POAccepted: com.temenos.microservice.payments.ingester.PoHandlerImpl
# temn.msf.raise.received.event: "true"
  temn.msf.ingest.is.avro.event.ingester: "false"
  temn.msf.outbox.direct.delivery.enabled: "true"
  temn.msf.security.authz.enabled: "false"
  temn.msf.stream.security.kafka.security.protocol: SASL_SSL
  temn.msf.stream.kafka.sasl.mechanism: PLAIN
  temn.msf.stream.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="Endpoint=sb://payments-kafka.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=8PAshRcMHZ5w35NnkyCxkJllly3wHQe7TffYNU29sJQ=";
  temn.msf.stream.kafka.ssl.enabled: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payments-scheduler-config
  namespace: payments
data:  
  DATABASE_KEY: sql
  HOST: payments-db-service
  DB_USERNAME: root
  DB_PASSWORD: password
  DATABASE_NAME: payments
  DRIVER_NAME: com.mysql.jdbc.Driver
  DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
  DB_CONNECTION_URL: jdbc:mysql://paymentorder-db-service:3306/payments  
  MAX_POOL_SIZE: "5"
  MIN_POOL_SIZE: "1"
  temn.msf.name: PaymentOrder
  temn.msf.security.authz.enabled: "false"
  temn.queue.impl: kafka
  temn.msf.isScheduler: "true"
  operationId: paymentscheduler
  temn_msf_function_class_paymentscheduler: com.temenos.microservice.payments.scheduler.PaymentOrderScheduler
  class.inbox.dao: com.temenos.microservice.framework.core.inbox.InboxDaoImpl
  class.outbox.dao: com.temenos.microservice.framework.core.outbox.OutboxDaoImpl
  temn.msf.stream.kafka.bootstrap.servers: payments-Kafka.servicebus.windows.net:9093
  temn.msf.ingest.is.cloud.event: "true"
  temn.msf.stream.vendor: kafka
  temn.msf.outbox.direct.delivery.enabled: "true"